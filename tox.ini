# Copyright 2022 Canonical Ltd.
# See LICENSE file for licensing details.

[tox]
skipsdist=True
skip_missing_interpreters = True
envlist = fmt, lint, unit

[vars]
src_path = {toxinidir}/src/
tst_path = {toxinidir}/tests/
lib_path = {toxinidir}/lib/charms/kratos
all_path = {[vars]src_path} {[vars]tst_path} {[vars]lib_path}

[testenv]
setenv =
  PYTHONPATH = {toxinidir}:{toxinidir}/lib:{[vars]src_path}
  PYTHONBREAKPOINT=ipdb.set_trace
  PY_COLORS=1
passenv =
  PYTHONPATH
  CHARM_BUILD_DIR
  MODEL_SETTINGS

[testenv:dev]
description = Prepare local development tools
deps =
    pre-commit
    mypy
    types-PyYAML
    -r{toxinidir}/fmt-requirements.txt
    -r{toxinidir}/lint-requirements.txt
commands =
    pre-commit install -t commit-msg

[testenv:fmt]
description = Apply coding style standards
deps =
    -r{toxinidir}/fmt-requirements.txt
commands =
    isort {[vars]all_path}
    ruff format {[vars]all_path}

[testenv:lint]
description = Check code against coding style standards
deps =
    ; The tomli package is needed because https://github.com/codespell-project/codespell?tab=readme-ov-file#using-a-config-file
    tomli
    -r{toxinidir}/lint-requirements.txt
commands =
    codespell {toxinidir}/
    isort --check-only --diff {[vars]all_path}
    ruff check --show-fixes {[vars]all_path}

[testenv:unit]
description = Run unit tests
deps =
    -r{toxinidir}/unit-requirements.txt
commands =
    coverage run --source={[vars]src_path},{[vars]lib_path} \
        -m pytest --ignore={[vars]tst_path}integration -vv --tb native -s {posargs}
    coverage report

[testenv:integration]
description = Run integration tests
pass_env =
    CHARM_PATH
deps =
    -r{toxinidir}/integration-requirements.txt
commands =
    pytest -v --tb native {[vars]tst_path}integration --log-cli-level=INFO -s {posargs}
