  name: Pull Request on Terraform Module

  on:
    pull_request:
      paths:
        - 'terraform/**/*.tf'

  jobs:
    build:
      name: Terraform Checks and Plans
      runs-on: ubuntu-latest
      steps:
        - name: Checkout
          uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4

        - name: HashiCorp - Setup Terraform
          uses: hashicorp/setup-terraform@b9cd54a3c349d3f38e8881555d616ced269862dd # v3.1.2

        - name: Terraform Format
          id: fmt
          run: terraform fmt -recursive -check
          working-directory: terraform

        - name: Terraform Init
          id: init
          run: terraform init
          working-directory: terraform

        - name: Terraform Validate
          id: validate
          run: terraform validate -no-color
          working-directory: terraform

        - uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7
          if: github.event_name == 'pull_request'
          env:
            PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
          with:
            github-token: ${{ secrets.GITHUB_TOKEN }}
            script: |
              // 1. Retrieve existing bot comments for the PR
              const { data: comments } = await github.rest.issues.listComments({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
              })
              const botComment = comments.find(comment => {
                return comment.user.type === 'Bot' && comment.body.includes('Terraform Format and Style')
              })

              // 2. Prepare format of the comment
              const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
              #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
              #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
              <details><summary>Validation Output</summary>

              \`\`\`\n
              ${{ steps.validate.outputs.stdout }}
              \`\`\`

              </details>

              *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Workflow: \`${{ github.workflow }}\`*`;

              // 3. If we have a comment, update it, otherwise create a new one
              if (botComment) {
                github.rest.issues.updateComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  comment_id: botComment.id,
                  body: output
                })
              } else {
                github.rest.issues.createComment({
                  issue_number: context.issue.number,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: output
                })
              }

    documentation:
      name: Render Terraform Docs
      needs: build
      uses: ./.github/workflows/documentation.yaml
